version: '3.9'

services:
  # ============ POSTGRESQL DATABASE ============
  postgres:
    image: postgres:16-alpine
    container_name: sts_postgres_prod
    environment:
      POSTGRES_USER: ${DB_USER:-sts_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-sts_clearance_prod}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sts_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sts_network
    restart: unless-stopped

  # ============ REDIS CACHE ============
  redis:
    image: redis:7-alpine
    container_name: sts_redis_prod
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sts_network
    restart: unless-stopped

  # ============ BACKEND API ============
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: "3.10"
    container_name: sts_backend_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-sts_user}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-sts_clearance_prod}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_HOURS: 24
      
      # CORS
      CORS_ORIGINS: "${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}"
      
      # Email (optional)
      SMTP_SERVER: ${SMTP_SERVER:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      PROMETHEUS_ENABLED: "true"
    volumes:
      - ./backend:/app
      - backend_logs_prod:/app/logs
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sts_network
    restart: unless-stopped
    command: >
      sh -c "
      python -m alembic upgrade head &&
      python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
      "

  # ============ FRONTEND ============
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: sts_frontend_prod
    depends_on:
      - backend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      NODE_ENV: production
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - sts_network
    restart: unless-stopped

  # ============ NGINX REVERSE PROXY ============
  nginx:
    image: nginx:latest
    container_name: sts_nginx_prod
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    networks:
      - sts_network
    restart: unless-stopped

  # ============ PROMETHEUS MONITORING ============
  prometheus:
    image: prom/prometheus:latest
    container_name: sts_prometheus_prod
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - sts_network
    restart: unless-stopped

  # ============ GRAFANA DASHBOARDS ============
  grafana:
    image: grafana/grafana:latest
    container_name: sts_grafana_prod
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - sts_network
    restart: unless-stopped

networks:
  sts_network:
    driver: bridge

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local