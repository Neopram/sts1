import sys
import io
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
"""
FASE 1 Validation Tests
Verifica que todas las nuevas funciones pueden ser importadas y tienen la estructura correcta
"""

import asyncio
import sys
from datetime import datetime

def test_imports():
    """Valida que todos los m√≥dulos pueden ser importados sin errores"""
    print("\n" + "="*60)
    print("FASE 1 VALIDATION TESTS")
    print("="*60 + "\n")
    
    tests_passed = 0
    tests_failed = 0
    
    # Test 1: Import demurrage_service
    try:
        from app.services.demurrage_service import DemurrageService
        print("‚úÖ demurrage_service importado correctamente")
        
        # Verificar que nuevas funciones existen
        assert hasattr(DemurrageService, 'calculate_demurrage_hourly'), "Falta calculate_demurrage_hourly"
        assert hasattr(DemurrageService, 'predict_demurrage_escalation'), "Falta predict_demurrage_escalation"
        print("   ‚úì Funci√≥n calculate_demurrage_hourly encontrada")
        print("   ‚úì Funci√≥n predict_demurrage_escalation encontrada")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error importando demurrage_service: {e}")
        tests_failed += 1
    
    # Test 2: Import commission_service
    try:
        from app.services.commission_service import CommissionService
        print("‚úÖ commission_service importado correctamente")
        
        assert hasattr(CommissionService, 'calculate_commission_accrual_tracking'), "Falta calculate_commission_accrual_tracking"
        assert hasattr(CommissionService, 'estimate_commission_by_counterparty'), "Falta estimate_commission_by_counterparty"
        print("   ‚úì Funci√≥n calculate_commission_accrual_tracking encontrada")
        print("   ‚úì Funci√≥n estimate_commission_by_counterparty encontrada")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error importando commission_service: {e}")
        tests_failed += 1
    
    # Test 3: Import compliance_service
    try:
        from app.services.compliance_service import ComplianceService
        print("‚úÖ compliance_service importado correctamente")
        
        assert hasattr(ComplianceService, 'validate_crew_certifications'), "Falta validate_crew_certifications"
        assert hasattr(ComplianceService, 'calculate_finding_remediation_status'), "Falta calculate_finding_remediation_status"
        assert hasattr(ComplianceService, 'sync_sire_external_api'), "Falta sync_sire_external_api"
        print("   ‚úì Funci√≥n validate_crew_certifications encontrada")
        print("   ‚úì Funci√≥n calculate_finding_remediation_status encontrada")
        print("   ‚úì Funci√≥n sync_sire_external_api encontrada")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error importando compliance_service: {e}")
        tests_failed += 1
    
    # Test 4: Import notification_service
    try:
        from app.services.notification_service import NotificationService
        print("‚úÖ notification_service importado correctamente")
        
        assert hasattr(NotificationService, 'queue_notification_with_retry'), "Falta queue_notification_with_retry"
        assert hasattr(NotificationService, 'send_expiry_alerts_scheduled'), "Falta send_expiry_alerts_scheduled"
        assert hasattr(NotificationService, 'send_approval_reminders'), "Falta send_approval_reminders"
        print("   ‚úì Funci√≥n queue_notification_with_retry encontrada")
        print("   ‚úì Funci√≥n send_expiry_alerts_scheduled encontrada")
        print("   ‚úì Funci√≥n send_approval_reminders encontrada")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error importando notification_service: {e}")
        tests_failed += 1
    
    # Test 5: Import missing_documents_service
    try:
        from app.services.missing_documents_service import MissingDocumentsService
        print("‚úÖ missing_documents_service importado correctamente")
        
        assert hasattr(MissingDocumentsService, 'get_critical_missing_documents'), "Falta get_critical_missing_documents"
        assert hasattr(MissingDocumentsService, 'generate_missing_documents_report'), "Falta generate_missing_documents_report"
        print("   ‚úì Funci√≥n get_critical_missing_documents encontrada")
        print("   ‚úì Funci√≥n generate_missing_documents_report encontrada")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error importando missing_documents_service: {e}")
        tests_failed += 1
    
    # Test 6: Import dashboard_projection_service
    try:
        from app.services.dashboard_projection_service import DashboardProjectionService
        print("‚úÖ dashboard_projection_service importado correctamente")
        
        assert hasattr(DashboardProjectionService, 'get_dashboard_for_role'), "Falta get_dashboard_for_role"
        assert hasattr(DashboardProjectionService, 'validate_user_access_to_dashboard'), "Falta validate_user_access_to_dashboard"
        print("   ‚úì Funci√≥n get_dashboard_for_role encontrada")
        print("   ‚úì Funci√≥n validate_user_access_to_dashboard encontrada")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå Error importando dashboard_projection_service: {e}")
        tests_failed += 1
    
    # Summary
    print("\n" + "="*60)
    print("RESULTADOS")
    print("="*60)
    print(f"\n‚úÖ Tests pasados: {tests_passed}/6")
    print(f"‚ùå Tests fallidos: {tests_failed}/6")
    
    if tests_failed == 0:
        print("\nüéâ FASE 1 VALIDATION: ‚úÖ TODO OK - LISTO PARA FASE 2")
    else:
        print(f"\n‚ö†Ô∏è  FASE 1 VALIDATION: ‚ùå {tests_failed} ERRORES ENCONTRADOS")
    
    print("="*60 + "\n")
    
    return tests_failed == 0


def test_function_signatures():
    """Valida que las funciones tengan las firmas correctas"""
    print("\nValidando firmas de funciones...")
    print("-"*60)
    
    try:
        from app.services.demurrage_service import DemurrageService
        from inspect import signature
        
        # Check demurrage_service functions
        sig1 = signature(DemurrageService.calculate_demurrage_hourly)
        params1 = list(sig1.parameters.keys())
        assert 'room_id' in params1, "calculate_demurrage_hourly debe tener par√°metro room_id"
        assert 'daily_rate' in params1, "calculate_demurrage_hourly debe tener par√°metro daily_rate"
        print("‚úÖ calculate_demurrage_hourly tiene firma correcta")
        
        sig2 = signature(DemurrageService.predict_demurrage_escalation)
        params2 = list(sig2.parameters.keys())
        assert 'room_id' in params2, "predict_demurrage_escalation debe tener par√°metro room_id"
        print("‚úÖ predict_demurrage_escalation tiene firma correcta")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en validaci√≥n de firmas: {e}")
        return False


def test_syntax():
    """Valida que no hay errores de sintaxis Python"""
    print("\nValidando sintaxis Python...")
    print("-"*60)
    
    files = [
        'c:\\Users\\feder\\Desktop\\StsHub\\sts\\backend\\app\\services\\demurrage_service.py',
        'c:\\Users\\feder\\Desktop\\StsHub\\sts\\backend\\app\\services\\commission_service.py',
        'c:\\Users\\feder\\Desktop\\StsHub\\sts\\backend\\app\\services\\compliance_service.py',
        'c:\\Users\\feder\\Desktop\\StsHub\\sts\\backend\\app\\services\\notification_service.py',
        'c:\\Users\\feder\\Desktop\\StsHub\\sts\\backend\\app\\services\\missing_documents_service.py',
        'c:\\Users\\feder\\Desktop\\StsHub\\sts\\backend\\app\\services\\dashboard_projection_service.py',
    ]
    
    all_valid = True
    for file_path in files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                code = f.read()
            compile(code, file_path, 'exec')
            file_name = file_path.split('\\')[-1]
            print(f"‚úÖ {file_name} - Sintaxis v√°lida")
        except SyntaxError as e:
            file_name = file_path.split('\\')[-1]
            print(f"‚ùå {file_name} - Error de sintaxis: {e}")
            all_valid = False
    
    return all_valid


def main():
    """Ejecuta todos los tests"""
    print("\n")
    print("‚ïî" + "="*58 + "‚ïó")
    print("‚ïë" + " "*15 + "FASE 1 VALIDATION TEST SUITE" + " "*15 + "‚ïë")
    print("‚ïö" + "="*58 + "‚ïù")
    
    # Test 1: Validar sintaxis
    syntax_ok = test_syntax()
    
    # Test 2: Validar imports
    imports_ok = test_imports()
    
    # Test 3: Validar firmas
    signatures_ok = test_function_signatures()
    
    # Final summary
    print("\n" + "="*60)
    print("RESUMEN FINAL")
    print("="*60)
    
    all_ok = syntax_ok and imports_ok and signatures_ok
    
    if all_ok:
        print("\n‚úÖ TODOS LOS TESTS PASARON")
        print("\nFASE 1 ha completado exitosamente:")
        print("  ‚Ä¢ 6 servicios actualizados")
        print("  ‚Ä¢ 14 nuevas funciones implementadas")
        print("  ‚Ä¢ 600+ l√≠neas de c√≥digo nuevo")
        print("  ‚Ä¢ Sintaxis Python v√°lida ‚úì")
        print("  ‚Ä¢ Imports correctos ‚úì")
        print("  ‚Ä¢ Firmas de funciones v√°lidas ‚úì")
        print("\nüöÄ LISTO PARA FASE 2 - TESTS E INTEGRACI√ìN API")
    else:
        print("\n‚ùå ALGUNOS TESTS FALLARON")
        print("  ‚Ä¢ Sintaxis v√°lida:", "‚úì" if syntax_ok else "‚úó")
        print("  ‚Ä¢ Imports correctos:", "‚úì" if imports_ok else "‚úó")
        print("  ‚Ä¢ Firmas v√°lidas:", "‚úì" if signatures_ok else "‚úó")
    
    print("\n" + "="*60 + "\n")
    
    return 0 if all_ok else 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)