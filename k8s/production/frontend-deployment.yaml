apiVersion: apps/v1
kind: Deployment
metadata:
  name: sts-frontend
  namespace: sts-production
  labels:
    app: sts-frontend
    component: web
    environment: production
    version: green
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sts-frontend
      environment: production
  template:
    metadata:
      labels:
        app: sts-frontend
        component: web
        environment: production
        version: green
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sts-frontend-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: sts-frontend
        image: ghcr.io/your-org/sts-clearance-hub-frontend:IMAGE_TAG
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        env:
        - name: REACT_APP_API_URL
          valueFrom:
            configMapKeyRef:
              name: sts-frontend-config
              key: api-url
        - name: REACT_APP_WS_URL
          valueFrom:
            configMapKeyRef:
              name: sts-frontend-config
              key: ws-url
        - name: REACT_APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: sts-frontend-config
              key: app-version
        - name: REACT_APP_ENVIRONMENT
          value: "production"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "sts-clearance-hub"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sts-frontend
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: sts-frontend-service
  namespace: sts-production
  labels:
    app: sts-frontend
    component: web
    environment: production
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789012:certificate/your-cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: LoadBalancer
  ports:
  - port: 443
    targetPort: 80
    protocol: TCP
    name: https
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: sts-frontend
    environment: production
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sts-frontend-sa
  namespace: sts-production
  labels:
    app: sts-frontend
    environment: production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sts-frontend-role
  namespace: sts-production
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sts-frontend-rolebinding
  namespace: sts-production
subjects:
- kind: ServiceAccount
  name: sts-frontend-sa
  namespace: sts-production
roleRef:
  kind: Role
  name: sts-frontend-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sts-frontend-pdb
  namespace: sts-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sts-frontend
      environment: production
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sts-frontend-hpa
  namespace: sts-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sts-frontend
  minReplicas: 3
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60