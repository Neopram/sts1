# FASE 5: Optimized Production Docker Compose
# 
# Production-ready configuration with:
# - Multi-stage builds for minimal image sizes
# - Health checks for all services
# - Resource limits and reservations
# - Network security
# - Logging and monitoring
# - Zero-downtime deployment support

version: '3.9'

services:
  # ===== FRONTEND - OPTIMIZED PRODUCTION BUILD =====
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.optimized
      args:
        NODE_ENV: production
        VITE_API_URL: "${API_URL:-http://backend:8001}"
        BUILD_OPTIMIZATION: "true"
    container_name: sts-frontend-optimized
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    environment:
      NODE_ENV: production
      VITE_API_URL: "${API_URL:-http://backend:8001}"
      COMPRESS_GZIP: "true"
    restart: unless-stopped
    networks:
      - sts-network
    volumes:
      - ./dist:/app/dist:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=frontend"

  # ===== BACKEND - OPTIMIZED PRODUCTION BUILD =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.optimized
      args:
        PYTHON_VERSION: "3.11"
        OPTIMIZATION_LEVEL: "2"
    container_name: sts-backend-optimized
    ports:
      - "${BACKEND_PORT:-8001}:8001"
    environment:
      FLASK_ENV: production
      DATABASE_URL: "postgresql://${DB_USER:-sts}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-sts_clearance}"
      REDIS_URL: "redis://redis:6379/0"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY}"
      CORS_ORIGINS: "${CORS_ORIGINS:-http://frontend:3000}"
      WORKERS: "4"
      LOG_LEVEL: "INFO"
    restart: unless-stopped
    networks:
      - sts-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
        labels: "service=backend"

  # ===== DATABASE - POSTGRESQL =====
  postgres:
    image: postgres:15-alpine
    container_name: sts-postgres-prod
    environment:
      POSTGRES_DB: "${DB_NAME:-sts_clearance}"
      POSTGRES_USER: "${DB_USER:-sts}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    restart: unless-stopped
    networks:
      - sts-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/alembic/versions:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sts}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===== CACHE - REDIS =====
  redis:
    image: redis:7-alpine
    container_name: sts-redis-prod
    restart: unless-stopped
    networks:
      - sts-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ===== MONITORING - PROMETHEUS =====
  prometheus:
    image: prom/prometheus:latest
    container_name: sts-prometheus
    restart: unless-stopped
    networks:
      - sts-network
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ===== METRICS - GRAFANA =====
  grafana:
    image: grafana/grafana:latest
    container_name: sts-grafana
    restart: unless-stopped
    networks:
      - sts-network
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-admin}"
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # ===== REVERSE PROXY - NGINX =====
  nginx:
    image: nginx:alpine
    container_name: sts-nginx
    restart: unless-stopped
    networks:
      - sts-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

networks:
  sts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local